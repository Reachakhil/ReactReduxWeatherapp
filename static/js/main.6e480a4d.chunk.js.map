{"version":3,"sources":["logo.svg","store/action/getWeatherDetail.js","store/actionTypes.js","container/WeatherDisplay.js","App.js","serviceWorker.js","store/reducer/WeatherReducer.js","index.js"],"names":["module","exports","setWeatherData","response","type","data","setcurrentcityWeatherData","setErrorData","WeatherDisplay","props","handleInputChange","target","setState","name","value","submitValue","a","state","CityName","getWeatherDetail","displayValue","getCurretCityWeather","param","temp","toFixed","val","this","WeatherDesc","renderVal","renderSwitch","showcurcityweather","CurrentCityWeatherData","get_temp","main","CircularProgress","showWeather","WeatherData","className","showerror","error","class","Input","autoFocus","margin","placeholder","onChange","Button","variant","onClick","color","Component","connect","dispatch","coordinate","place","axios","get","then","catch","App","Boolean","window","location","hostname","match","Weatherstate","CurrentCityWeatherDesc","Weatherreducer","action","weather","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","WeatherReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e480a4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {GETWEATHERDETAIL,GETCURRENTCITYWEATHER,SHOWERROR} from '../actionTypes'\nimport axios from 'axios'\n\nexport const getWeatherDetail = (place) =>{\n    return dispatch => {\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${place}&APPID=4c21e45fa6bcad5691d034cbef788451`)\n        .then( response => {\n        dispatch(setWeatherData(response));\n        } )\n        .catch( error => {\n            dispatch(setErrorData());\n        } );\n    };\n    \n};\n\nexport const getCurrentCityWeather = () =>{\n    return  dispatch =>{\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=bangalore&APPID=4c21e45fa6bcad5691d034cbef788451`)\n        .then( response => {\n        dispatch(setcurrentcityWeatherData(response));\n        } )\n        .catch( error => {\n            // dispatch(setErrorData());\n        } );\n        \n    };\n};\n\nexport const setWeatherData = (response) =>{\nreturn {\n        type:GETWEATHERDETAIL,\n        response:response.data\n    }\n}\nexport const setcurrentcityWeatherData = (response) =>{\nreturn {\n        type:GETCURRENTCITYWEATHER,\n        response:response.data\n    }\n}\n\nexport const setErrorData = () =>{\n    return {\n        type:SHOWERROR\n    }\n}\n","export const GETWEATHERDETAIL = 'GETWEATHERDETAIL';\nexport const GETCURRENTCITYWEATHER = 'GETCURRENTCITYWEATHER';\nexport const SHOWERROR = 'SHOWERROR';\n","import React, { Component } from 'react';\nimport {getWeatherDetail,getCurrentCityWeather} from '../store/action/getWeatherDetail';\nimport { connect } from 'react-redux';\nimport CloudIcon from '@material-ui/icons/Cloud';\nimport axios from 'axios';\nimport '../container/WeatherDisplay.css'\nimport { Button } from '@material-ui/core';\nimport { Input } from '@material-ui/core';\nimport { number } from 'prop-types';\nimport { CircularProgress } from '@material-ui/core';\n\n\n\n\n\n\nexport  class WeatherDisplay extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            CityName:'',\n            displayValue : 'SHOWS WEATHER'\n        };\t\n        this.props.getCurretCityWeather();\n\n    }\n    \n    \n    componentDidMount () {\n    }\n\n    handleInputChange = ({target}) => {\n        const name  = target;\n\t\tthis.setState({\n\t\t\t[target.name] : target.value\n\t\t});\n    }\n    submitValue = () =>{\n        let a = ''\n        a=this.state.CityName\n        this.props.getWeatherDetail(a);\n    }\n    \n\n    renderSwitch(param) {\n        switch(param) {\n        case 'Clouds':\n            return 'Clouds';\n        case 'Clear':\n            return 'Clear'\n        case 'Haze':\n            return 'Haze-mist';\n        case 'Mist':\n            return 'Haze-mist';\n        case 'Rain':\n            return 'rain';\n        default:\n            return 'Clouds';\n        }\n    }\n    get_temp(temp){\n        return (temp - 273.15).toFixed(2)\n    }\n\n    render() {\n        const val= this.props.WeatherDesc\n        const renderVal = this.renderSwitch(val)\n        let showcurcityweather = this.props.CurrentCityWeatherData?\n        <p>{this.get_temp(this.props.CurrentCityWeatherData.main.temp)}c</p>:<p><CircularProgress/></p>;\n        let showWeather = this.props.WeatherData ? \n        <div className=\"weather-description\">\n        <p className=\"name\">Place:{this.props.WeatherData.name}, Temprature: {this.get_temp(this.props.WeatherData.main.temp)} C</p>\n        <p>{this.props.WeatherDesc}</p></div>:<p></p>;\n        let showerror = this.props.error  ? <p>{this.props.error}</p>: <p></p>;\n    \n        return (\n            <div className={renderVal}>\n            <div className=\"header\">\n            <div className=\"header-left\">SHOW WEATHER</div>\n            <div className=\"header-right\">Bangalore  <CloudIcon/> {showcurcityweather}</div>\n            </div>\n            <div className=\"Input\">\n            <p class=\"input-lable\">Enter the City..</p>\n                <Input \n                className=\"input-lable\"\n                autoFocus=\"true\"\n                margin=\"dense\"\n                placeholder=\"city\" \n                type=\"text\"\n                name=\"CityName\"\n                value={this.state.CityName} \n                onChange = {this.handleInputChange} />\n                <div>\n            <Button variant=\"contained\" value=\"Send\"\n            onClick={this.submitValue} color=\"primary\">\n        Submit\n        </Button> \n            </div> \n            <h2> {showWeather}</h2> \n            <h2>{showerror}</h2>\n            </div>\n            </div>\n        \n        )\n    }\n    \n}\n\nconst mapStateToProps = (state) => {\n    return {\n        WeatherData: state.WeatherData,\n        WeatherDesc:state.WeatherDesc,\n        CurrentCityWeatherData:state.CurrentCityWeatherData,\n        error:state.error\n\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getWeatherDetail: (coordinate) => dispatch(getWeatherDetail(coordinate)),\n        getCurretCityWeather : () => dispatch(getCurrentCityWeather())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherDisplay);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherDisplay from './container/WeatherDisplay';\n\n\nfunction App() {\n  return (\n<div>\n    <WeatherDisplay/>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GETWEATHERDETAIL,GETCURRENTCITYWEATHER,SHOWERROR} from '../actionTypes' \n\nconst Weatherstate={\n    WeatherData:'',\n    WeatherDesc:'',\n    CurrentCityWeatherData:'',\n    CurrentCityWeatherDesc:'',\n    error:''\n}\nconst Weatherreducer = ( state = Weatherstate, action ) => {\n    switch (action.type) {\n    case GETWEATHERDETAIL:\n        return {\n            ...state,\n            WeatherData:action.response,\n            WeatherDesc:action.response.weather[0].main\n\n        }\n    case GETCURRENTCITYWEATHER:\n    return {\n        ...state,\n            CurrentCityWeatherData:action.response,\n            CurrentCityWeatherDesc:action.response.weather[0].main\n\n    }\n    case SHOWERROR:\n    return {\n        ...state,\n        error:'Please Enter Correct City'\n    }\n \n\n    default:\n    return state;\n\n    }\n\n}\nexport default Weatherreducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport WeatherReducer from './store/reducer/WeatherReducer';\n\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(WeatherReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\n\nReactDOM.render(\n<Provider store={store}>\n<App /> \n</Provider>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}